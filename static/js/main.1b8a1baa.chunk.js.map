{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","searchField","selectFilter","handlerInput","event","setState","target","name","value","todos","this","props","selectUser","selectedUserId","filter","todo","title","includes","completed","className","onChange","map","id","userId","key","classNames","type","checked","readOnly","onClick","React","Component","request","endpoint","fetch","then","response","json","result","data","CurrentUser","user","loadUser","prevProps","resetSelectedUser","email","phone","App","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1b8a1baa.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    searchField: '',\n    selectFilter: 0,\n  }\n\n  handlerInput = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n\n  render() {\n    let { todos } = this.props;\n    const { searchField, selectFilter } = this.state;\n    const { selectUser, selectedUserId } = this.props;\n    const { handlerInput } = this;\n\n    if (searchField) {\n      todos = todos.filter(todo => todo.title.includes(searchField));\n    }\n\n    switch (selectFilter) {\n      case 'active':\n        todos = todos.filter(todo => todo.completed === false);\n        break;\n      case 'completed':\n        todos = todos.filter(todo => todo.completed);\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <input\n          className=\"TodoList__item\"\n          name=\"searchField\"\n          value={searchField}\n          onChange={handlerInput}\n        />\n\n        <select\n          className=\"TodoList__item\"\n          name=\"selectFilter\"\n          value={selectFilter}\n          onChange={handlerInput}\n        >\n          <option value=\"all\">all</option>\n          <option value=\"active\">active</option>\n          <option value=\"completed\">comleted</option>\n\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map(({ id, title, userId, completed }) => (\n              <li\n                key={id}\n                className={classNames({\n                  'TodoList__item TodoList__item--checked': completed,\n                  'TodoList__item TodoList__item--unchecked': !completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={completed}\n                    readOnly\n                  />\n                  <p>{title}</p>\n                </label>\n\n                <button\n                  className={classNames('TodoList__user-button', 'button', {\n                    'TodoList__user-button--selected':\n                      userId === selectedUserId,\n                  })}\n                  type=\"button\"\n                  onClick={() => selectUser(userId)}\n                >\n                  User&nbsp;\n                  {' '}\n                  {userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst todoType = PropTypes.shape({\n  userId: PropTypes.number.isRequired,\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool,\n});\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(todoType).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","function request(endpoint) {\n  const API_URL = 'https://mate-api.herokuapp.com/';\n\n  return fetch(`${API_URL}${endpoint}`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport const getTodos = () => request('todos');\n\nexport const getUserById = id => request(`users/${id}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserById } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  loadUser() {\n    getUserById(this.props.userId)\n      .then(user => this.setState({\n        user,\n      }));\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return \"Loading...\";\n    }\n\n    const { resetSelectedUser } = this.props;\n\n    const {\n      id,\n      name,\n      email,\n      phone,\n    } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            resetSelectedUser();\n            this.setState({\n              user: null,\n            });\n          }}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  resetSelectedUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => this.setState({\n        todos: todos.filter(todo => todo.title && todo.userId),\n      }));\n  }\n\n  selectUser = (id) => {\n    this.setState({\n      selectedUserId: id,\n    });\n  }\n\n  resetSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n    const { selectUser, resetSelectedUser } = this;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos.length > 0 && (\n            <TodoList\n              todos={todos}\n              selectUser={selectUser}\n              selectedUserId={selectedUserId}\n            />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                resetSelectedUser={resetSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}